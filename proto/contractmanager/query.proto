syntax = "proto3";
package neutronorg.neutron.contractmanager;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "contractmanager/params.proto";
import "contractmanager/genesis.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/neutron-org/neutron/x/contractmanager/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/neutron-org/neutron/contractmanager/params";
  }
  // Queries a Failure by address.
	rpc Failure(QueryGetFailureRequest) returns (QueryGetFailureResponse) {
		option (google.api.http).get = "/neutron-org/neutron/contractmanager/failure/{address}";
	}

	// Queries a list of Failure items.
	rpc AllFailures(QueryAllFailureRequest) returns (QueryAllFailureResponse) {
		option (google.api.http).get = "/neutron-org/neutron/contractmanager/failure";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetFailureRequest {
	string address = 1;
}

message QueryGetFailureResponse {
	repeated Failure failures = 1 [(gogoproto.nullable) = false];
}

message QueryAllFailureRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFailureResponse {
	repeated Failure failure = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetNextFailureIdRequest {
	string address = 1;
}

message QueryGetNextGameResponse {
	NextFailureId NextFailureId = 1;
}

// this line is used by starport scaffolding # 3
